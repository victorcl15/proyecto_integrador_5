import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Cargar los datos
df = pd.read_csv("src/recoleccion_de_datos_automaticos/static/data/riot_data_enriched.csv")
df['fecha'] = pd.to_datetime(df['fecha'])

# Mostrar t칤tulo
st.title("Dashboard de KPIs Financieros - RIOT")

# Filtro por rango de fechas
fecha_inicio = st.date_input("Fecha inicio", df['fecha'].min())
fecha_fin = st.date_input("Fecha fin", df['fecha'].max())

df_filtrado = df[(df['fecha'] >= pd.to_datetime(fecha_inicio)) & (df['fecha'] <= pd.to_datetime(fecha_fin))]

df['ma_30'] = df['cierre_ajustado'].rolling(window=30).mean()


# KPIs
st.subheader("游늵 Indicadores clave")

col1, col2, col3 = st.columns(3)

with col1:
    tasa_variacion = df_filtrado['daily_return'].mean()
    st.metric("Tasa de Variaci칩n Promedio", f"{tasa_variacion:.2%}")

with col2:
    media_movil = df_filtrado['ma_7'].iloc[-1]
    st.metric("Media M칩vil (7 d칤as)", f"{media_movil:.2f}")

with col3:
    volatilidad = df_filtrado['volatility_14'].iloc[-1]
    st.metric("Volatilidad (14 d칤as)", f"{volatilidad:.2f}")

col4, col5 = st.columns(2)

with col4:
    retorno_acumulado = df_filtrado['cum_return'].iloc[-1]
    st.metric("Retorno Acumulado", f"{retorno_acumulado:.2%}")

with col5:
    desviacion_std = df_filtrado['std_30'].iloc[-1]
    st.metric("Desviaci칩n Est치ndar (30 d칤as)", f"{desviacion_std:.2f}")

# Gr치fico interactivo
st.subheader("游늳 Cierre Ajustado")
fig, ax = plt.subplots()
ax.plot(df_filtrado['fecha'], df_filtrado['cierre_ajustado'], label="Cierre ajustado")
ax.plot(df_filtrado['fecha'], df_filtrado['ma_7'], label="MA 7", linestyle='--')
ax.plot(df_filtrado['fecha'], df_filtrado['ma_30'], label="MA 30", linestyle=':', color='green')
ax.set_xlabel("Fecha")
ax.set_ylabel("Precio")
ax.legend()
st.pyplot(fig)
st.markdown("Se observan fuertes picos de volatilidad en 2018 y especialmente en 2021, seguidos de una ca칤da sostenida del precio. Las medias m칩viles suavizan las fluctuaciones diarias, permitiendo identificar tendencias: cuando el precio cruza por encima de ellas, sugiere una fase alcista, y cuando cae por debajo, indica posibles correcciones o fases bajistas. En general, el activo pas칩 de una etapa especulativa a una fase de mayor estabilidad en los 칰ltimos a침os.")


st.subheader("游늴 Retorno Diario (%)")
st.line_chart(df_filtrado.set_index("fecha")["daily_return"])
st.markdown("Se observan picos significativos de retorno positivo y negativo especialmente entre 2018 y 2021, lo que evidencia una alta volatilidad durante esos a침os. A partir de 2022, las fluctuaciones se vuelven menos extremas, lo que sugiere un comportamiento m치s estable del activo. Este tipo de an치lisis permite entender el riesgo y la frecuencia de cambios bruscos en el precio.")


st.subheader("游늵 Volatilidad 14 d칤as")
st.bar_chart(df_filtrado.set_index("fecha")["volatility_14"])
st.markdown(" Se observan picos significativos de volatilidad entre 2018 y 2021, coincidiendo con periodos de alta inestabilidad del activo. A partir de 2022, la volatilidad disminuye y se mantiene en niveles m치s bajos y estables, lo que sugiere un comportamiento menos especulativo. Este indicador permite evaluar el riesgo asociado a invertir en el activo, ya que mayores niveles de volatilidad implican mayor incertidumbre en los precios.")

st.subheader("游늳 Retorno Acumulado")
st.area_chart(df_filtrado.set_index("fecha")["cum_return"])
st.markdown("Se evidencian fases de fuerte crecimiento, especialmente en 2018 y 2021, seguidas por ca칤das pronunciadas que reflejan p칠rdida de ganancias acumuladas. A partir de 2022, el retorno muestra una tendencia m치s estable, pero sin recuperar los niveles m치ximos anteriores. Este indicador es 칰til para visualizar el desempe침o hist칩rico total de una inversi칩n y evaluar su comportamiento en distintos ciclos del mercado.")


fig = px.scatter(df_filtrado, x="volatility_14", y="cierre_ajustado", color="fecha", 
                 title="Relaci칩n entre Precio y Volatilidad")
st.plotly_chart(fig)
st.markdown(" Se observa que, en general, los precios m치s altos tienden a estar asociados con niveles de volatilidad moderada, aunque hay excepciones con alta volatilidad en rangos de precios elevados. Esto sugiere que, aunque el aumento en el precio puede coincidir con cierta inestabilidad, no existe una correlaci칩n lineal clara entre ambas variables. Este tipo de visualizaci칩n ayuda a entender c칩mo var칤a el riesgo (volatilidad) en diferentes niveles de precio.")

st.subheader("游늵 Distribuci칩n de Retornos Diarios")
fig, ax = plt.subplots()
ax.hist(df_filtrado["daily_return"], bins=50, color='skyblue', edgecolor='black')
ax.set_xlabel("Retorno Diario")
ax.set_ylabel("Frecuencia")
st.pyplot(fig)
st.markdown("La forma de campana centrada alrededor del 0 indica que la mayor칤a de los retornos diarios son peque침os y cercanos a cero, con m치s d칤as ligeramente positivos o negativos. Tambi칠n se observa una ligera asimetr칤a hacia la derecha, lo que sugiere que aunque las p칠rdidas extremas ocurren, hay d칤as con retornos positivos muy altos. Esta visualizaci칩n ayuda a evaluar la frecuencia, magnitud y simetr칤a de los rendimientos diarios, lo cual es clave para analizar el riesgo.")


st.subheader("游댠 Mapa de calor de correlaciones")
corr = df_filtrado[["cierre_ajustado", "ma_7", "ma_30", "daily_return", "volatility_14", "cum_return", "std_30"]].corr()
fig, ax = plt.subplots()
sns.heatmap(corr, annot=True, cmap="coolwarm", ax=ax)
st.pyplot(fig)
st.markdown("Se observa una alta correlaci칩n entre el precio de cierre ajustado, las medias m칩viles (MA 7 y MA 30), y el retorno acumulado, lo que indica que estas variables se mueven casi en sincron칤a. Por el contrario, los retornos diarios presentan muy baja correlaci칩n con las dem치s variables, lo que sugiere que sus fluctuaciones son m치s independientes. Este an치lisis es 칰til para identificar relaciones directas entre indicadores y evitar redundancias al seleccionar variables para modelos predictivos o an치lisis t칠cnico.")

# Cargar los datos con predicciones
df_pred = pd.read_csv("src/recoleccion_de_datos_automaticos/static/data/riot_data_con_predicciones.csv")
df_pred['fecha'] = pd.to_datetime(df_pred['fecha'])

# Filtrar datos de predicciones por el mismo rango de fechas
df_pred_filtrado = df_pred[(df_pred['fecha'] >= pd.to_datetime(fecha_inicio)) & (df_pred['fecha'] <= pd.to_datetime(fecha_fin))]

st.subheader("游댩 Precio Real vs Predicci칩n del Modelo")
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(df_pred_filtrado['fecha'], df_pred_filtrado['cierre_ajustado'], label="Precio Real", linewidth=2, color='blue')
ax.plot(df_pred_filtrado['fecha'], df_pred_filtrado['prediccion'], label="Predicci칩n", linewidth=2, color='red', linestyle='--')
ax.set_xlabel("Fecha")
ax.set_ylabel("Precio ($)")
ax.legend()
ax.grid(True, alpha=0.3)
ax.set_title("Comparaci칩n entre Precio Real y Predicciones del Modelo")
st.pyplot(fig)

st.markdown("El modelo de Random Forest muestra un desempe침o notable al seguir de cerca las tendencias principales del precio real de RIOT. Se observa que las predicciones capturan efectivamente los movimientos direccionales y los patrones generales, aunque con cierto desfase en los picos m치s extremos. La precisi칩n del modelo es especialmente evidente en per칤odos de menor volatilidad, mientras que en momentos de alta volatilidad las predicciones tienden a ser m치s conservadoras. Este comportamiento es t칤pico de los modelos de machine learning que priorizan la estabilidad sobre la captura de movimientos extremos.")


